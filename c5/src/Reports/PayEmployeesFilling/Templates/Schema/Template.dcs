<?xml version="1.0" encoding="UTF-8"?>
<DataCompositionSchema xmlns="http://v8.1c.ru/8.1/data-composition-system/schema" xmlns:dcscom="http://v8.1c.ru/8.1/data-composition-system/common" xmlns:dcscor="http://v8.1c.ru/8.1/data-composition-system/core" xmlns:dcsset="http://v8.1c.ru/8.1/data-composition-system/settings" xmlns:v8="http://v8.1c.ru/8.1/data/core" xmlns:v8ui="http://v8.1c.ru/8.1/data/ui" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dataSource>
		<name>DataSource1</name>
		<dataSourceType>Local</dataSourceType>
	</dataSource>
	<dataSet xsi:type="DataSetQuery">
		<name>DataSet1</name>
		<field xsi:type="DataSetFieldField">
			<dataPath>Employee</dataPath>
			<field>Employee</field>
			<title xsi:type="v8:LocalStringType">
				<v8:item>
					<v8:lang>en</v8:lang>
					<v8:content>Employee</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ru</v8:lang>
					<v8:content>Сотрудник</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ro</v8:lang>
					<v8:content>Angajat</v8:content>
				</v8:item>
			</title>
			<role>
				<dcscom:dimension>true</dcscom:dimension>
				<dcscom:ignoreNullValues>true</dcscom:ignoreNullValues>
			</role>
			<valueType>
				<v8:Type xmlns:d5p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d5p1:CatalogRef.Individuals</v8:Type>
			</valueType>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Company</dataPath>
			<field>Company</field>
			<title xsi:type="v8:LocalStringType">
				<v8:item>
					<v8:lang>en</v8:lang>
					<v8:content>Company</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ru</v8:lang>
					<v8:content>Компания</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ro</v8:lang>
					<v8:content>Companie</v8:content>
				</v8:item>
			</title>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Compensation</dataPath>
			<field>Compensation</field>
			<role>
				<dcscom:dimension>true</dcscom:dimension>
				<dcscom:ignoreNullValues>true</dcscom:ignoreNullValues>
			</role>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Edit</dataPath>
			<field>Edit</field>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Amount</dataPath>
			<field>Amount</field>
			<title xsi:type="v8:LocalStringType">
				<v8:item>
					<v8:lang>en</v8:lang>
					<v8:content>Amount</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ru</v8:lang>
					<v8:content>Сумма</v8:content>
				</v8:item>
				<v8:item>
					<v8:lang>ro</v8:lang>
					<v8:content>Suma</v8:content>
				</v8:item>
			</title>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Account</dataPath>
			<field>Account</field>
			<role>
				<dcscom:dimension>true</dcscom:dimension>
			</role>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Position</dataPath>
			<field>Position</field>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Schedule</dataPath>
			<field>Schedule</field>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Department</dataPath>
			<field>Department</field>
		</field>
		<dataSource>DataSource1</dataSource>
		<query>// CalculatingDocument
select distinct Compensations.Employee as Employee
into CalculatingDocument
from Document.PayEmployees.Compensations as Compensations
where Compensations.Ref = &amp;CalculatingDocument
and not Compensations.Employee in ( select distinct Employee from Document.PayEmployees.Compensations where Compensations.Edit )
index by Employee
;
// Compensations
select cast ( Balances.ExtDimension1 as Catalog.Individuals ) as Employee, Balances.ExtDimension2 as Compensation,
	Balances.AmountBalanceCr as Amount, Balances.Account as Account
into Compensations
from AccountingRegister.General.Balance ( &amp;BalancesDate, Account in ( &amp;Account ), ,
	{ExtDimension1 in ( select Employee from CalculatingDocument where &amp;CalculatingDocument &lt;&gt; value ( Document.PayEmployees.EmptyRef ) )}
	{Company.* as Company, ExtDimension1.* as Employee, ExtDimension2.* as Compensation} ) as Balances
	//
	// Personnel
	//
	join (
		select distinct Employee.Individual as Employee
		from InformationRegister.Personnel.SliceLast ( &amp;BalancesDate, {Employee.Individual.* as Employee, Employee.Company.* as Company} ) as Personnel
		{where Personnel.Department.* as Department, Personnel.Position.* as Position, Personnel.Schedule.* as Schedule}
	) as Personnel
	on Personnel.Employee = Balances.ExtDimension1
where not &amp;TaxesOnly
index by Employee
;
// AllCompensations
select false as Edit, Compensations.Employee as Employee, Compensations.Compensation as Compensation,
	Compensations.Account as Account, Compensations.Amount * ( &amp;Percent / 100 ) as Amount
into AllCompensations
from Compensations as Compensations
union all
select true, PayEmployees.Employee, PayEmployees.Compensation, PayEmployees.Account, PayEmployees.Amount
from Document.PayEmployees.Compensations as PayEmployees
where &amp;Calculating
and PayEmployees.Edit
{where PayEmployees.Ref = &amp;CalculatingDocument and &amp;CalculatingDocument &lt;&gt; value ( Document.PayEmployees.EmptyRef )}
union all
select PayEmployees.Edit, PayEmployees.Employee, PayEmployees.Compensation, PayEmployees.Account, PayEmployees.Amount
from Document.PayEmployees.Compensations as PayEmployees
where &amp;TaxesOnly
{where PayEmployees.Ref = &amp;CalculatingTaxesDocument and &amp;CalculatingTaxesDocument &lt;&gt; value ( Document.PayEmployees.EmptyRef )}
index by Employee
;
// Rates
select Rates.Tax as Tax, Rates.Limit as Limit, Rates.Rate as Rate
into Rates
from InformationRegister.PayrollTaxes.SliceLast ( &amp;BalancesDate ) as Rates
where Rates.Use
;
// Scaled
select Rates.Tax as Tax, Rates.Limit as Limit, Rates.Rate as Rate
into Scaled
from Rates as Rates
where Rates.Limit &lt;&gt; 0
union
select distinct Rates.Tax, 0, 0
from Rates as Rates
where Rates.Limit &lt;&gt; 0
;
// ScaledRates
select Scaled.Tax as Tax, Scaled.Limit as LimitFrom, min ( ScaledTo.Limit ) as LimitTo, min ( ScaledTo.Rate ) as Rate
into ScaledRates
from Scaled as Scaled
	//
	// ScateTo
	//
	join Scaled as ScaledTo
	on ScaledTo.Tax = Scaled.Tax
	and ScaledTo.Limit &gt; Scaled.Limit
group by Scaled.Tax, Scaled.Limit, Scaled.Rate
union all
select Rates.Tax, 0, 999999999999, Rates.Rate
from Rates as Rates
where Rates.Limit = 0
;
// OtherTaxes
select Taxes.Edit as Edit, Taxes.Employee as Employee, Taxes.Compensation as Compensation, Taxes.Tax as Tax,
	Taxes.Account as Account, Taxes.Base as Base, Taxes.Result as Result
into OtherTaxes
from (
	select false as Edit, Based.Employee as Employee, Based.Compensation as Compensation, Based.Tax as Tax,
		Based.Account as Account, Based.Amount as Base, Based.Amount / 100 * Rates.Rate as Result
	from (
		select Compensations.Employee as Employee, Compensations.Compensation as Compensation, Taxes.Ref as Tax,
		Taxes.Ref.Account as Account, sum ( Compensations.Amount ) as Amount
		from AllCompensations as Compensations
			//
			// Taxes
			//
			join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Taxes
			on Taxes.CalculationType = Compensations.Compensation
			// There are fixed set of accounts which should be calculated
			// at this point in time (actual Payment)
			and Taxes.Ref.Method = value ( Enum.Calculations.MedicalInsurance )
		group by Compensations.Employee, Compensations.Compensation, Taxes.Ref
		) as Based
		//
		// Rates
		//
		join ScaledRates as Rates
		on Rates.Tax = Based.Tax
		//
		// Exclude modified records
		//
		left join Document.PayEmployees.Taxes as PayEmployees
		on PayEmployees.Ref = &amp;Ref
		and PayEmployees.Employee = Based.Employee
		and PayEmployees.Compensation = Based.Compensation
		and PayEmployees.Tax = Based.Tax
		and PayEmployees.Account = Based.Account
		and PayEmployees.Edit
	where PayEmployees.Ref is null
	union all
	select true, PayEmployees.Employee, PayEmployees.Compensation, PayEmployees.Tax, PayEmployees.Account,
		PayEmployees.Base, PayEmployees.Result
	from Document.PayEmployees.Taxes as PayEmployees
	where PayEmployees.Ref = &amp;Ref
	and PayEmployees.Edit
	// There are all possible taxes, including percentage, which user
	// could define in this document
	and not PayEmployees.Tax.Method in (
			value ( Enum.Calculations.IncomeTax ),
			value ( Enum.Calculations.FixedIncomeTax )
		)
	) as Taxes
;
// Employees
select distinct Compensations.Employee as Employee
into Employees
from AllCompensations as Compensations
index by Employee
;
// WorkPeriods
select Employees.Employee.Individual as Employee, &amp;YearStart as Period, Employees.Hired as Hired
into Employment
from InformationRegister.Employees.SliceLast ( &amp;YearStart, Employee.Individual in ( select Employee from Employees ) ) as Employees
where Employees.Hired
and Employees.Employee in (
	select Employee
	from InformationRegister.Employment
	where Employment in ( value ( Enum.Employment.Main ), value ( Enum.Employment.SecondJob ) )
)
union
select Employees.Employee.Individual, Employees.Period, Employees.Hired
from InformationRegister.Employees as Employees
where Employees.Period &gt; &amp;YearStart and Employees.Period &lt;= &amp;BalancesDate
and Employees.Employee.Individual in ( select Employee from Employees )
and Employees.Employee in (
	select Employee
	from InformationRegister.Employment
	where Employment in ( value ( Enum.Employment.Main ), value ( Enum.Employment.SecondJob ) )
)
index by Employee
;
// WorkPeriods
select Employment.Employee as Employee, max ( Employment.Period ) as DateStart,
	max ( isnull ( Terminated.Period, &amp;BalancesDate ) ) as DateEnd,
	1 + sum ( datediff ( Employment.Period, isnull ( Terminated.Period, &amp;BalancesDate ), month ) ) as Period
into WorkPeriods
from Employment as Employment
	//
	// Terminated
	//
	left join Employment as Terminated
	on Terminated.Employee = Employment.Employee
	and Terminated.Period &gt; Employment.Period
	and not Terminated.Hired
where Employment.Hired
group by Employment.Employee
index by Employee
;
// Calendar
select Period as Period
into Calendar
from (
	select &amp;YearStart as Period
	union all
	select dateadd ( &amp;YearStart, month, 1 )
	union all
	select dateadd ( &amp;YearStart, month, 2 )
	union all
	select dateadd ( &amp;YearStart, month, 3 )
	union all
	select dateadd ( &amp;YearStart, month, 4 )
	union all
	select dateadd ( &amp;YearStart, month, 5 )
	union all
	select dateadd ( &amp;YearStart, month, 6 )
	union all
	select dateadd ( &amp;YearStart, month, 7 )
	union all
	select dateadd ( &amp;YearStart, month, 8 )
	union all
	select dateadd ( &amp;YearStart, month, 9 )
	union all
	select dateadd ( &amp;YearStart, month, 10 )
	union all
	select dateadd ( &amp;YearStart, month, 11 )
	) as Calendar
where Calendar.Period between &amp;YearStart and &amp;BalancesDate
index by Period
;
// DeductionRates
select &amp;YearStart as Period, Deductions.Deduction as Deduction, Deductions.Rate as Rate
into DeductionRates
from InformationRegister.DeductionRates.SliceLast ( &amp;YearStart ) as Deductions
union all
select Deductions.Period, Deductions.Deduction, Deductions.Rate
from InformationRegister.DeductionRates as Deductions
where Deductions.Period &gt; &amp;YearStart and Deductions.Period &lt;= &amp;BalancesDate
index by Period
;
// DeductionsList
select Calendar.Period as Period, Deductions.Deduction as Deduction, Deductions.Rate as Rate
into DeductionsList
from Calendar as Calendar
	//
	// DeductionPeriods
	//
	join (
		select Calendar.Period as Period, Deductions.Deduction as Deduction, max ( Deductions.Period ) as DeductionPeriod
		from Calendar as Calendar
			//
			// Deductions
			//
			left join DeductionRates as Deductions
			on Deductions.Period &lt;= Calendar.Period
		group by Calendar.Period, Deductions.Deduction
	) as DeductionPeriods
	on DeductionPeriods.Period = Calendar.Period
	//
	// DeductionRate
	//
	join DeductionRates as Deductions
	on Deductions.Deduction = DeductionPeriods.Deduction
	and Deductions.Period = DeductionPeriods.DeductionPeriod
index by Period, Deduction
;
// EmployeeDeductions
select &amp;YearStart as Period, true as Use, Deductions.Employee.Individual as Employee, Deductions.Deduction as Deduction
into EmployeeDeductions
from InformationRegister.Deductions.SliceLast ( &amp;YearStart, Employee.Individual in ( select Employee from Employees ) ) as Deductions
where Deductions.Use
union all
select Deductions.Period, Deductions.Use, Deductions.Employee.Individual, Deductions.Deduction
from InformationRegister.Deductions as Deductions
where Employee.Individual in ( select Employee from Employees )
and Deductions.Period &gt; &amp;YearStart and Deductions.Period &lt;= &amp;BalancesDate
index by Period, Employee
;
// EmployeeDeductionPeriods
select Calendar.Period as Period, Deductions.Employee as Employee, Deductions.Deduction as Deduction,
	max ( Deductions.Period ) as DeductionPeriod
into EmployeeDeductionPeriods
from Calendar as Calendar
	//
	// Deductions
	//
	left join EmployeeDeductions as Deductions
	on Deductions.Period &lt;= Calendar.Period
group by Calendar.Period, Deductions.Employee, Deductions.Deduction
index by Period, Employee
;
// Deductions
select Deductions.Employee as Employee, sum ( case when Deductions.Use then DeductionsList.Rate / 12 else 0 end ) as Amount
into Deductions
from Calendar as Calendar
	//
	// DeductionPeriods
	//
	join EmployeeDeductionPeriods as DeductionPeriods
	on DeductionPeriods.Period = Calendar.Period
	//
	// Deductions
	//
	join EmployeeDeductions as Deductions
	on Deductions.Period = DeductionPeriods.DeductionPeriod
	and Deductions.Employee = DeductionPeriods.Employee
	and Deductions.Deduction = DeductionPeriods.Deduction
	//
	// DeductionsList
	//
	join DeductionsList as DeductionsList
	on DeductionsList.Period = Calendar.Period
	and DeductionsList.Deduction = Deductions.Deduction
group by Deductions.Employee
index by Employee
;
// OtherTaxesAccounts
select distinct Taxes.Ref.Account as Account
into OtherTaxesAccounts
from AllCompensations as Compensations
	//
	// Taxes
	//
	join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Taxes
	on Taxes.CalculationType = Compensations.Compensation
	and not Taxes.Ref.Method in (
		value ( Enum.Calculations.IncomeTax ),
		value ( Enum.Calculations.FixedIncomeTax )
	)
;
// CompensationAccounts
select Compensations.Account as Account
into CompensationAccounts
from ChartOfCalculationTypes.Compensations as Compensations
where not DeletionMark
union
select Ref
from ChartOfAccounts.General as General
where General.Ref in ( &amp;Account )
;
// TaxableCompensations
select Taxes.Employee as Employee, Taxes.Compensation as Compensation, isnull ( Special.Tax, Taxes.Tax ) as Tax
into TaxableCompensations
from (
	select Compensations.Employee as Employee, Compensations.Compensation as Compensation, isnull ( Scaled.Ref, Fixed.Ref ) as Tax
	from AllCompensations as Compensations
		//
		// Scaled Income Tax
		//
		left join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Scaled
		on Scaled.CalculationType = Compensations.Compensation
		and Scaled.Ref.Method = value ( Enum.Calculations.IncomeTax )
		//
		// Fixed Income Tax
		//
		left join ChartOfcalculationTypes.Taxes.BaseCalculationTypes as Fixed
		on Fixed.CalculationType = Compensations.Compensation
		and Fixed.Ref.Method = value ( Enum.Calculations.FixedIncomeTax )
	where isnull ( Scaled.Ref, Fixed.Ref ) is not null
	) as Taxes
	//
	// Special Income Tax
	//
	left join InformationRegister.IncomeTax.SliceLast ( &amp;BalancesDate, Individual in ( select Employee from Employees ) ) as Special
	on Special.Individual = Taxes.Employee
index by Employee
;
// AnnualIncome
select cast ( AnnualIncome.ExtDimension1 as Catalog.Individuals ) as Employee, AnnualIncome.ExtDimension2 as Compensation,
	sum ( AnnualIncome.AmountTurnoverDr ) as Amount
into AnnualIncome
from AccountingRegister.General.Turnovers ( &amp;YearStart, &amp;BalancesDate, ,
	Account in ( select Account from CompensationAccounts ), ,
	( ExtDimension1, ExtDimension2 ) in ( select distinct Employee, Compensation from TaxableCompensations )
	) as AnnualIncome
group by AnnualIncome.ExtDimension1, AnnualIncome.ExtDimension2
index by Employee
;
// Previous IncomeTax
select cast ( PreviousIncomeTax.BalancedExtDimension1 as Catalog.Individuals ) as Employee, PreviousIncomeTax.Account as Account,
	sum ( PreviousIncomeTax.AmountTurnoverCr ) as Amount
into PreviousIncomeTax
from AccountingRegister.General.Turnovers ( &amp;YearStart, &amp;BalancesDate, ,
	Account in ( select Tax.Account from TaxableCompensations ), ,
	( BalancedExtDimension1, BalancedExtDimension2 ) in ( select distinct Employee, Compensation from TaxableCompensations )
	) as PreviousIncomeTax
group by PreviousIncomeTax.BalancedExtDimension1, PreviousIncomeTax.Account
index by Employee
;
// IncomeTaxBase
select cast ( Base.Employee as Catalog.Individuals ) as Employee, Taxes.Tax as Tax, sum ( Base.Amount ) as Amount
into IncomeTaxBase
from (
	select AnnualIncome.Employee as Employee, AnnualIncome.Amount as Amount
	from AnnualIncome as AnnualIncome
	union all
	select OtherAnnualTaxes.ExtDimension1, - OtherAnnualTaxes.AmountTurnoverDr
	from AccountingRegister.General.Turnovers ( &amp;YearStart, &amp;BalancesDate, ,
					Account in ( select Account from CompensationAccounts ), ,
					( ExtDimension1, ExtDimension2 ) in ( select Employee, Compensation from TaxableCompensations ),
					BalancedAccount in ( select Account from OtherTaxesAccounts ) ) as OtherAnnualTaxes
	union all
	select Compensations.Employee, Compensations.Amount
	from AllCompensations as Compensations
	where Compensations.Compensation in ( select distinct Compensation from TaxableCompensations )
	union all
	select OtherTaxes.Employee, - OtherTaxes.Result
	from OtherTaxes as OtherTaxes
	where OtherTaxes.Compensation in ( select distinct Compensation from TaxableCompensations )
	and OtherTaxes.Tax.Method = value ( Enum.Calculations.MedicalInsurance )
	) as Base
	//
	// Taxes
	//
	join ( select distinct Employee, Tax from TaxableCompensations ) as Taxes
	on Taxes.Employee = Base.Employee
group by Base.Employee, Taxes.Tax
index by Employee
;
// Final selection: Taxes
select Taxes.Edit as Edit, Taxes.Employee as Employee, Taxes.Compensation as Compensation, Taxes.Tax as Tax,
	Taxes.Account as Account, Taxes.Base as Base, Taxes.Result as Result, Taxes.Deductions as Deductions,
	Taxes.Period as Period, Taxes.Tax.Method as Method
from (
	select false as Edit, IncomeTax.Employee as Employee, null as Compensation, IncomeTax.Tax as Tax,
		IncomeTax.Account as Account, IncomeTax.Base as Base, IncomeTax.Result as Result,
		IncomeTax.Deductions as Deductions, IncomeTax.Period as Period
	from (
		select IncomeTax.Employee as Employee, IncomeTax.Amount as Base, IncomeTax.Tax as Tax, IncomeTax.Account as Account,
			IncomeTax.Deductions as Deductions, IncomeTax.Period as Period,
			IncomeTax.Result - isnull ( PreviousIncomeTax.Amount, 0 ) as Result
		from (
			select Base.Employee as Employee, Base.Amount as Amount, Base.Tax as Tax, Base.Tax.Account as Account,
				Deductions.Amount as Deductions, isnull ( WorkPeriods.Period, 0 ) as Period,
				sum (
					case
						when Rates.LimitFrom / 12 * isnull ( WorkPeriods.Period, 1 ) &lt; ( Base.Amount - isnull ( Deductions.Amount, 0 ) ) then
						(
							case
								when ( Base.Amount - isnull ( Deductions.Amount, 0 ) ) &lt; Rates.LimitTo / 12 * isnull ( WorkPeriods.Period, 1 ) then
									( Base.Amount - isnull ( Deductions.Amount, 0 ) )
								else
									Rates.LimitTo / 12 * isnull ( WorkPeriods.Period, 1 )
							end - Rates.LimitFrom / 12 * isnull ( WorkPeriods.Period, 1 )
						) / 100 * Rates.Rate
						else
							0
					end ) as Result
			from IncomeTaxBase as Base
				//
				// Deductions
				//
				left join Deductions as Deductions
				on Deductions.Employee = Base.Employee
				//
				// WorkPeriods
				//
				left join WorkPeriods as WorkPeriods
				on WorkPeriods.Employee = Base.Employee
				//
				// Rates
				//
				join ScaledRates as Rates
				on Rates.Tax = Base.Tax
			group by Base.Employee, Base.Tax, Base.Amount, isnull ( WorkPeriods.Period, 0 ), Deductions.Amount
			) as IncomeTax
			//
			// PreviousIncomeTax
			//
			left join PreviousIncomeTax as PreviousIncomeTax
			on PreviousIncomeTax.Employee = IncomeTax.Employee
			and PreviousIncomeTax.Account = IncomeTax.Account
		) as IncomeTax
		//
		// Exclude modified records
		//
		left join Document.PayEmployees.Taxes as PayEmployees
		on PayEmployees.Ref = &amp;Ref
		and PayEmployees.Employee = IncomeTax.Employee
		and PayEmployees.Tax = IncomeTax.Tax
		and PayEmployees.Account = IncomeTax.Account
		and PayEmployees.Edit
	where PayEmployees.Ref is null
	union all
	select true, PayEmployees.Employee, PayEmployees.Compensation, PayEmployees.Tax, PayEmployees.Account,
		PayEmployees.Base, PayEmployees.Result, PayEmployees.Deductions, PayEmployees.Period
	from Document.PayEmployees.Taxes as PayEmployees
	where PayEmployees.Ref = &amp;Ref
	and PayEmployees.Edit
	and PayEmployees.Tax.Method in (
			value ( Enum.Calculations.IncomeTax ),
			value ( Enum.Calculations.FixedIncomeTax )
		)
	union all
	select Taxes.Edit, Taxes.Employee, Taxes.Compensation, Taxes.Tax as Tax, Taxes.Account,
		Taxes.Base, Taxes.Result, 0, 0
	from OtherTaxes as Taxes
	) as Taxes
order by Taxes.Employee.Description, Taxes.Employee.Code,
	case Taxes.Tax.Method
		when value ( Enum.Calculations.MedicalInsurance ) then 0
	 	when value ( Enum.Calculations.IncomeTax ) then 1
		when value ( Enum.Calculations.FixedIncomeTax ) then 2
		else 3
	end
;
// Final selection: Compensations
select Compensations.Edit as Edit, Compensations.Employee as Employee, Compensations.Compensation as Compensation,
	Compensations.Account as Account, Compensations.Amount as Amount
{select Edit, Employee.*, Compensation.*, Account.*, Amount}
from AllCompensations as Compensations
order by Compensations.Employee.Description, Compensations.Employee.Code,
	case Compensation.Method
	 	when value ( Enum.Calculations.MonthlyRate ) then 0
		when value ( Enum.Calculations.HourlyRate ) then 1
		when value ( Enum.Calculations.EveningHours ) then 2
		when value ( Enum.Calculations.NightHours ) then 3
		else 4
	end
</query>
		<autoFillFields>false</autoFillFields>
	</dataSet>
	<parameter>
		<name>Date</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>As of</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ru</v8:lang>
				<v8:content>По состоянию на</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>De la</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:CatalogRef.Calendar</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>false</useRestriction>
		<inputParameters>
			<dcscor:item>
				<dcscor:use>false</dcscor:use>
				<dcscor:parameter>EditFormat</dcscor:parameter>
				<dcscor:value xsi:type="v8:LocalStringType">
					<v8:item>
						<v8:lang>en</v8:lang>
						<v8:content>DLF=D</v8:content>
					</v8:item>
					<v8:item>
						<v8:lang>ru</v8:lang>
						<v8:content>DLF=D</v8:content>
					</v8:item>
					<v8:item>
						<v8:lang>ro</v8:lang>
						<v8:content>DLF=D</v8:content>
					</v8:item>
				</dcscor:value>
			</dcscor:item>
		</inputParameters>
		<denyIncompleteValues>true</denyIncompleteValues>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>Account</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Account</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ru</v8:lang>
				<v8:content>Счет</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>Contul</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:ChartOfAccountsRef.General</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>false</useRestriction>
		<inputParameters>
			<dcscor:item>
				<dcscor:parameter>ChoiceParameters</dcscor:parameter>
				<dcscor:value xsi:type="dcscor:ChoiceParameters">
					<dcscor:item>
						<dcscor:choiceParameter>Filter.Offline</dcscor:choiceParameter>
						<dcscor:value xsi:type="xs:boolean">false</dcscor:value>
					</dcscor:item>
				</dcscor:value>
			</dcscor:item>
		</inputParameters>
		<denyIncompleteValues>true</denyIncompleteValues>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>Ref</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Ref</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>Ref</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:DocumentRef.PayEmployees</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>true</useRestriction>
	</parameter>
	<parameter>
		<name>CalculationVariant</name>
		<title xsi:type="xs:string">Calculation variant</title>
		<valueType>
			<v8:Type>xs:decimal</v8:Type>
			<v8:NumberQualifiers>
				<v8:Digits>0</v8:Digits>
				<v8:FractionDigits>0</v8:FractionDigits>
				<v8:AllowedSign>Any</v8:AllowedSign>
			</v8:NumberQualifiers>
		</valueType>
		<value xsi:type="xs:decimal">0</value>
		<useRestriction>true</useRestriction>
		<availableAsField>false</availableAsField>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>Calculating</name>
		<title xsi:type="xs:string">Calculating</title>
		<valueType>
			<v8:Type>xs:boolean</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>true</useRestriction>
		<expression>case when &amp;CalculationVariant = 2 then true else false end</expression>
		<availableAsField>false</availableAsField>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>TaxesOnly</name>
		<title xsi:type="xs:string">Taxes only</title>
		<valueType>
			<v8:Type>xs:boolean</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>true</useRestriction>
		<expression>case when &amp;CalculationVariant = 3 then true else false end</expression>
		<availableAsField>false</availableAsField>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>CalculatingDocument</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Calculating document</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:DocumentRef.PayEmployees</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>false</useRestriction>
	</parameter>
	<parameter>
		<name>CalculatingTaxesDocument</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Calculating taxes document</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:DocumentRef.PayEmployees</v8:Type>
		</valueType>
		<value xsi:nil="true"/>
		<useRestriction>false</useRestriction>
	</parameter>
	<parameter>
		<name>YearStart</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Year start</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:dateTime</v8:Type>
			<v8:DateQualifiers>
				<v8:DateFractions>DateTime</v8:DateFractions>
			</v8:DateQualifiers>
		</valueType>
		<value xsi:type="xs:dateTime">0001-01-01T00:00:00</value>
		<useRestriction>true</useRestriction>
	</parameter>
	<parameter>
		<name>Percent</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Payment Percent</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ru</v8:lang>
				<v8:content>Процент выплаты</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>Procentul de plată</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:decimal</v8:Type>
			<v8:NumberQualifiers>
				<v8:Digits>5</v8:Digits>
				<v8:FractionDigits>2</v8:FractionDigits>
				<v8:AllowedSign>Any</v8:AllowedSign>
			</v8:NumberQualifiers>
		</valueType>
		<value xsi:type="xs:decimal">0</value>
		<useRestriction>false</useRestriction>
		<use>Always</use>
	</parameter>
	<parameter>
		<name>BalancesDate</name>
		<title xsi:type="xs:string">Balances date</title>
		<valueType>
			<v8:Type>xs:dateTime</v8:Type>
			<v8:DateQualifiers>
				<v8:DateFractions>DateTime</v8:DateFractions>
			</v8:DateQualifiers>
		</valueType>
		<value xsi:type="xs:dateTime">0001-01-01T00:00:00</value>
		<useRestriction>false</useRestriction>
		<availableAsField>false</availableAsField>
	</parameter>
	<settingsVariant>
		<dcsset:name>Default</dcsset:name>
		<dcsset:presentation xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>For Testing</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ru</v8:lang>
				<v8:content>Для проверок</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>Pentru testare</v8:content>
			</v8:item>
		</dcsset:presentation>
		<dcsset:settings xmlns:style="http://v8.1c.ru/8.1/data/ui/style" xmlns:sys="http://v8.1c.ru/8.1/data/ui/fonts/system" xmlns:web="http://v8.1c.ru/8.1/data/ui/colors/web" xmlns:win="http://v8.1c.ru/8.1/data/ui/colors/windows">
			<dcsset:selection>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Employee</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Compensation</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Account</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Amount</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Edit</dcsset:field>
				</dcsset:item>
			</dcsset:selection>
			<dcsset:filter>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Employee</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:userSettingID>5c381009-bce8-49d8-adfc-fd38b8d60507</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Department</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:userSettingID>a79c62ca-e10a-486b-a641-93f3ebc0237b</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Position</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>47ccdb38-fc42-48cc-8571-a41e47909a8c</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Schedule</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>1962b207-fd39-46c1-bbcf-a27f84a4e4c5</dcsset:userSettingID>
				</dcsset:item>
			</dcsset:filter>
			<dcsset:dataParameters>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Date</dcscor:parameter>
					<dcscor:value xsi:nil="true"/>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:use>false</dcscor:use>
					<dcscor:parameter>Account</dcscor:parameter>
					<dcscor:value xsi:nil="true"/>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>eac6ca61-3d28-476d-b175-17d2d79b01b8</dcsset:userSettingID>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Percent</dcscor:parameter>
					<dcscor:value xsi:type="xs:decimal">100</dcscor:value>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>03d7e4a9-fe00-4e60-b6f6-b516ea57ddf6</dcsset:userSettingID>
				</dcscor:item>
			</dcsset:dataParameters>
			<dcsset:order>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Employee</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Employee.Code</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>DateStart</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Priority</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Level</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Compensation</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
			</dcsset:order>
			<dcsset:outputParameters>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>AppearanceTemplate</dcscor:parameter>
					<dcscor:value xsi:type="xs:string">Reports</dcscor:value>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Title</dcscor:parameter>
					<dcscor:value xsi:type="v8:LocalStringType">
						<v8:item>
							<v8:lang>en</v8:lang>
							<v8:content>Payroll Accounting</v8:content>
						</v8:item>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Начисление ЗП</v8:content>
						</v8:item>
						<v8:item>
							<v8:lang>ro</v8:lang>
							<v8:content>Calcule salariale</v8:content>
						</v8:item>
					</dcscor:value>
				</dcscor:item>
			</dcsset:outputParameters>
			<dcsset:item xsi:type="dcsset:StructureItemGroup">
				<dcsset:order>
					<dcsset:item xsi:type="dcsset:OrderItemAuto"/>
				</dcsset:order>
				<dcsset:selection>
					<dcsset:item xsi:type="dcsset:SelectedItemAuto"/>
				</dcsset:selection>
			</dcsset:item>
		</dcsset:settings>
	</settingsVariant>
	<settingsVariant>
		<dcsset:name>#Fill</dcsset:name>
		<dcsset:presentation xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Pay</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ru</v8:lang>
				<v8:content>Выплата</v8:content>
			</v8:item>
			<v8:item>
				<v8:lang>ro</v8:lang>
				<v8:content>Plată</v8:content>
			</v8:item>
		</dcsset:presentation>
		<dcsset:settings xmlns:style="http://v8.1c.ru/8.1/data/ui/style" xmlns:sys="http://v8.1c.ru/8.1/data/ui/fonts/system" xmlns:web="http://v8.1c.ru/8.1/data/ui/colors/web" xmlns:win="http://v8.1c.ru/8.1/data/ui/colors/windows">
			<dcsset:selection>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Account</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Compensation</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Employee</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Edit</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Amount</dcsset:field>
				</dcsset:item>
			</dcsset:selection>
			<dcsset:filter>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Employee</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:userSettingID>5c381009-bce8-49d8-adfc-fd38b8d60507</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Department</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:userSettingID>a79c62ca-e10a-486b-a641-93f3ebc0237b</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Position</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>655aaa01-ec08-4c9d-9588-53a8b1f80dd9</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Schedule</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>808a85f1-d067-4153-bd6d-2c97d93a8474</dcsset:userSettingID>
				</dcsset:item>
			</dcsset:filter>
			<dcsset:dataParameters>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:use>false</dcscor:use>
					<dcscor:parameter>Date</dcscor:parameter>
					<dcscor:value xsi:type="xs:dateTime">0001-01-01T00:00:00</dcscor:value>
					<dcsset:userSettingID>53f8c8a3-2c6b-44c2-a6ae-dddc89787f82</dcsset:userSettingID>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:use>false</dcscor:use>
					<dcscor:parameter>Account</dcscor:parameter>
					<dcscor:value xsi:nil="true"/>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>337de7c4-f977-4cd2-9a63-90a27b09a72e</dcsset:userSettingID>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Percent</dcscor:parameter>
					<dcscor:value xsi:type="xs:decimal">100</dcscor:value>
					<dcsset:viewMode>Normal</dcsset:viewMode>
					<dcsset:userSettingID>8feed203-4026-4161-9c4c-4abc84536126</dcsset:userSettingID>
				</dcscor:item>
			</dcsset:dataParameters>
			<dcsset:order>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Employee</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Employee.Code</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>DateStart</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Priority</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Level</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:OrderItemField">
					<dcsset:field>Compensation</dcsset:field>
					<dcsset:orderType>Asc</dcsset:orderType>
				</dcsset:item>
			</dcsset:order>
			<dcsset:outputParameters>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>AppearanceTemplate</dcscor:parameter>
					<dcscor:value xsi:type="xs:string">Reports</dcscor:value>
				</dcscor:item>
				<dcscor:item xsi:type="dcsset:SettingsParameterValue">
					<dcscor:parameter>Title</dcscor:parameter>
					<dcscor:value xsi:type="v8:LocalStringType">
						<v8:item>
							<v8:lang>en</v8:lang>
							<v8:content>Payroll Accounting</v8:content>
						</v8:item>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Начисление ЗП</v8:content>
						</v8:item>
						<v8:item>
							<v8:lang>ro</v8:lang>
							<v8:content>Calcule salariale</v8:content>
						</v8:item>
					</dcscor:value>
				</dcscor:item>
			</dcsset:outputParameters>
			<dcsset:item xsi:type="dcsset:StructureItemGroup">
				<dcsset:order>
					<dcsset:item xsi:type="dcsset:OrderItemAuto"/>
				</dcsset:order>
				<dcsset:selection>
					<dcsset:item xsi:type="dcsset:SelectedItemAuto"/>
				</dcsset:selection>
			</dcsset:item>
		</dcsset:settings>
	</settingsVariant>
</DataCompositionSchema>